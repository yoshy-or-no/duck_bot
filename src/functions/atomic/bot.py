from io import BytesIO
from typing import List
from PIL import Image  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PIL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –ø–æ–º–æ—â—å—é `pip install pillow`
import requests
import telebot
from telebot import types
from telebot.callback_data import CallbackData
from bot_func_abc import AtomicBotFunctionABC


class AtomicDuckBotFunction(AtomicBotFunctionABC):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∫–æ–º–∞–Ω–¥—ã /ducks."""

    commands: List[str] = ["ducks", "duck"]
    authors: List[str] = ["IHVH"]
    about: str = "–§—É–Ω–∫—Ü–∏—è —Å —É—Ç–∫–∞–º–∏!"
    description: str = (
        "–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ç–æ–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ /ducks. "
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å, –∏ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!"
    )
    state: bool = True

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –∏ —Ñ–∞–±—Ä–∏–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É—Ç–æ–∫."""
        self.bot = None
        self.duck_keyboard_factory = None

    def set_handlers(self, app: telebot.TeleBot):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫."""
        self.bot = app
        self.duck_keyboard_factory = CallbackData('t_key_button', prefix=self.commands[0])

        @app.message_handler(commands=self.commands)
        def ducks_message_handler(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ducks."""
            msg = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ç–æ–∫, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3):"
            force_reply = types.ForceReply(selective=False)
            app.send_message(chat_id=message.chat.id, text=msg, reply_markup=force_reply)
            app.register_next_step_handler(message, self.__process_count_step)

        @app.callback_query_handler(func=None, config=self.duck_keyboard_factory.filter())
        def duck_keyboard_callback(call: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫."""
            callback_data: dict = self.duck_keyboard_factory.parse(callback_data=call.data)
            t_key_button = callback_data.get('t_key_button', '')

            if t_key_button == 'force_reply':
                force_reply = types.ForceReply(selective=False)
                text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ç–æ–∫, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3):"
                app.send_message(call.message.chat.id, text, reply_markup=force_reply)
                app.register_next_step_handler(call.message, self.__process_count_step)
            else:
                app.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–Ω–æ–ø–∫–∞")

    def __process_count_step(self, message: types.Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ç–æ–∫, –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        try:
            chat_id = message.chat.id
            txt = message.text
            if txt.isdigit():
                count = int(txt)
                if count <= 0:
                    raise ValueError("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
                markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
                markup.add('PNG', 'JPEG')
                msg = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (PNG –∏–ª–∏ JPEG):"
                self.bot.send_message(chat_id, msg, reply_markup=markup)
                self.bot.register_next_step_handler(message, self.__process_format_step, count)
            else:
                self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        except ValueError as ex:
            self.bot.reply_to(message, f"–û—à–∏–±–∫–∞: {ex}")

    def __process_format_step(self, message: types.Message, count: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."""
        try:
            chat_id = message.chat.id
            file_format = message.text.lower()

            if file_format not in ['png', 'jpeg']:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í—ã–±–µ—Ä–∏—Ç–µ PNG –∏–ª–∏ JPEG.")

            duck_images = self.get_duck_images(count, file_format)

            for i, img in enumerate(duck_images):
                self.bot.send_photo(chat_id, img, caption=f"–£—Ç–∫–∞ {i + 1}")

            self.bot.send_message(
                chat_id, 
                f"–í–æ—Ç {count} —É—Ç–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {file_format.upper()}! ü¶Ü"
            )
        except ValueError as ex:
            self.bot.reply_to(message, f"–û—à–∏–±–∫–∞: {ex}")

    def get_duck_images(self, count: int = 2, file_format: str = 'png') -> List[BytesIO]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ç–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
        images = []
        for _ in range(count):
            url = "https://random-d.uk/api/randomimg"
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                img = Image.open(BytesIO(response.content))
                img_byte_arr = BytesIO()
                img.save(img_byte_arr, format=file_format.upper())
                img_byte_arr.seek(0)
                images.append(img_byte_arr)
        return images
