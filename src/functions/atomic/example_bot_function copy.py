import random
import logging
from typing import List
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from telegram import ReplyKeyboardMarkup
from io import BytesIO
from PIL import Image
from bot_func_abc import AtomicBotFunctionABC


class AtomicDuckBotFunction(AtomicBotFunctionABC):
    """–§—É–Ω–∫—Ü–∏—è Telegram-–±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Ç–∫–∞–º–∏"""
    
    commands: List[str] = ["ducks", "save"]
    authors: List[str] = ["User"]
    about: str = "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Ç–æ–∫."
    description: str = """–§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ç–æ–∫ 
                          –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (jpeg, png, gif –∏ –¥—Ä.)."""

    bot: ApplicationBuilder
    duck_keyboard_factory: CallbackData

    def set_handlers(self, app: ApplicationBuilder):
        self.bot = app
        self.duck_keyboard_factory = CallbackData('action', prefix=self.commands[0])

        app.add_handler(CommandHandler("start", self.start_handler))
        app.add_handler(CommandHandler("ducks", self.ducks_handler))
        app.add_handler(CommandHandler("save", self.save_handler))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))

    async def start_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("Ducks")
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —É—Ç–∫–∞–º–∏ ü¶Ü. –ù–∞–∂–º–∏ 'Ducks', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ —É—Ç–æ–∫!",
            reply_markup=keyboard
        )

    async def ducks_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ducks"""
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —É—Ç–æ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3):")
        context.user_data['awaiting_duck_count'] = True

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ç–æ–∫"""
        if context.user_data.get('awaiting_duck_count', False):
            try:
                count = int(update.message.text)
                if count <= 0:
                    raise ValueError("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")

                duck_images = self.get_duck_images(count)
                context.user_data['duck_images'] = duck_images

                await update.message.reply_text(f"–í–æ—Ç {count} —É—Ç–æ–∫! ü¶Ü")
                for i, img in enumerate(duck_images):
                    await update.message.reply_photo(photo=img, caption=f"–£—Ç–∫–∞ {i + 1}")

                context.user_data['awaiting_duck_count'] = False
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        elif update.message.text.lower() == "ducks":
            await self.ducks_handler(update, context)

    async def save_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /save"""
        if 'duck_images' in context.user_data and context.user_data['duck_images']:
            # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
            duck_image = context.user_data['duck_images'][0]
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, jpeg, png, gif):")
            context.user_data['awaiting_format'] = duck_image
        else:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —É—Ç–∫—É –∫–æ–º–∞–Ω–¥–æ–π 'Ducks'.")

    async def handle_format(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ"""
        duck_image = context.user_data.get('awaiting_format')
        if duck_image:
            format = update.message.text.strip().lower()
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                output = self.save_image(duck_image, format)
                filename = f"duck.{format}"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await update.message.reply_document(document=output, filename=filename)

                # –£–±–∏—Ä–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                context.user_data['awaiting_format'] = None
            except Exception as e:
                await update.message.reply_text(
                    f"–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '{format}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç (jpeg, png, gif).")
        else:
            await update.message.reply_text("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —É—Ç–∫—É –∫–æ–º–∞–Ω–¥–æ–π 'Ducks'.")

    def get_duck_images(self, count=2):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Ç–æ–∫"""
        images = []
        for _ in range(count):
            url = f"https://random-d.uk/api/randomimg?t={random.randint(1, 10000)}"
            response = requests.get(url)
            if response.status_code == 200:
                images.append(response.content)
        return images

    def save_image(self, image_bytes, format):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        img = Image.open(BytesIO(image_bytes))
        output = BytesIO()
        img.save(output, format=format.upper())
        output.seek(0)
        return output


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    TOKEN = "YOUR_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    app = ApplicationBuilder().token(TOKEN).build()

    bot_function = AtomicDuckBotFunction()
    bot_function.set_handlers(app)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()