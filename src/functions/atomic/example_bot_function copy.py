from abc import ABC, abstractmethod
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import requests
import random

class AtomicBotFunctionABC(ABC):
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞. –ö–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ–±–æ–π
    –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –±–æ—Ç–æ–≤—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö.
    """

    @abstractmethod
    async def execute(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        pass

    @abstractmethod
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        pass


class DuckBotFunction(AtomicBotFunctionABC):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ —É—Ç–∫–∏ –¥–ª—è –±–æ—Ç–∞.
    """

    def get_duck_images(self, count=2):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ç–æ–∫ —á–µ—Ä–µ–∑ API.
        """
        images = []
        for _ in range(count):
            url = f"https://random-d.uk/api/randomimg?t={random.randint(1, 10000)}"
            response = requests.get(url)
            if response.status_code == 200:
                images.append(response.content)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return images

    async def execute(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Ç–æ–∫ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É.
        """
        duck_images = self.get_duck_images(2)
        context.user_data["duck_images"] = duck_images

        # –°–æ–∑–¥–∞—ë–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ç–∫–∏
        keyboard = [
            [InlineKeyboardButton("–£—Ç–∫–∞ 1", callback_data="0")],
            [InlineKeyboardButton("–£—Ç–∫–∞ 2", callback_data="1")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for i, img in enumerate(duck_images):
            await update.message.reply_photo(photo=img, caption=f"–£—Ç–∫–∞ {i + 1}")

        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ç–∫—É ü¶Ü:", reply_markup=reply_markup)

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        """
        query = update.callback_query
        await query.answer()

        choice = int(query.data)
        chosen_duck = context.user_data["duck_images"][choice]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Ç–∫—É
        await query.message.reply_photo(photo=chosen_duck, caption="–í—ã –≤—ã–±—Ä–∞–ª–∏ —ç—Ç—É —É—Ç–∫—É ü¶Ü!")